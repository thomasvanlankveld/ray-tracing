@startuml all structs and traits

class Camera << struct >> {
    + new() -> Self
    + get_ray() -> Ray
}

abstract class Hittable << trait >> {
    + hit() -> bool
}

Hittable --> HitRecord

class Sphere << struct >> {
    - center: Point3
    - radius: f64
    + new() -> Self
    + hit() -> bool
}

Sphere --> HitRecord

class HittableList << struct >> {
    - objects: Vec<Box<dyn Hittable>>,
    + new() -> Self
    + clear()
    + add()
    + hit() -> bool
}

HittableList "1" --> "*" Hittable
HittableList --> HitRecord

Hittable <|-- Sphere : implements
Hittable <|-- HittableList : implements

class HitRecord << struct >> {
    + point: Point3
    + normal: Vec3
    + material: Rc<dyn Material>
    + t: f64
    + is_front_face: bool
    + new() -> Self
    + set_face_normal()
}

abstract class Material << trait >> {
    + scatter() -> bool
}

class Dielectric << struct >> {
    - refraction_index: f64
    + scatter() -> bool
}

Dielectric --|> Material : implements

class Lambertian << struct >> {
    - Color albedo
    + scatter() -> bool
}

Lambertian --|> Material : implements

class Metal << struct >> {
    - Color albedo
    - f64 fuzz
    + scatter() -> bool
}

Metal --|> Material : implements

class Ray << struct >> {
    + origin: Point3
    + direction: Vec3
    + new() -> Self
    + nowhere() -> Self
    + at() -> Point3
}

Ray --> Point3
Ray --> Vec3

class Vec3 << struct >> {
    + x: f64
    + y: f64
    + z: f64
    + new() -> Self
    + random() -> Self
    + random_in_range() -> Self
    + random_in_unit_sphere() -> Self
    + random_unit_vector() -> Self
    + random_in_unit_disk() -> Self
    + len() -> f64
    + len_squared() -> f64
    + dot() -> f64
    + cross() -> Self
    + unit_vector() -> Self
    + is_near_zero() -> bool
    + reflect() -> Self
    + refract() -> Self
    + neg() -> Self
    + add() -> Self
    + add_assign() -> void
    + sub() -> Self
    + sub_assign() -> void
    + mul() -> Self
    + mul() -> Self
    + mul_assign() -> void
    + div() -> Self
    + div_assign() -> void
}

class Color << alias >> {
    + ...
    + ...()
}

Color --> Vec3 : alias

class Point3 << alias >> {
    + ...
    + ...()
}

Point3 --> Vec3 : alias

@enduml
