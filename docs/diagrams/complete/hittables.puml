@startuml hittables

abstract class Hittable << trait >> {
    + hit(&self, ray: Ray, t_min: f64, t_max: f64, record: &mut HitRecord) -> bool
}

Hittable --> Ray
Hittable --> HitRecord

class Sphere << struct >> {
    - center: Point3
    - radius: f64
    - material: Rc<dyn Material>
    + new(center: Point3, radius: f64, material: Rc<dyn Material>) -> Self
    + hit(&self, ray: Ray, t_min: f64, t_max: f64, record: &mut HitRecord) -> bool
}

Sphere --> Point3
Sphere --> Material
Sphere --> Ray
Sphere --> HitRecord

class HittableList << struct >> {
    - objects: Vec<Box<dyn Hittable>>,
    + new() -> Self
    + clear(&mut self)
    + add(&mut self, object: Box<dyn Hittable>)
    + hit(&self, ray: Ray, t_min: f64, t_max: f64, record: &mut HitRecord) -> bool
}

HittableList --> Ray
HittableList "1" --> "*" Hittable : contains
HittableList --> HitRecord

Hittable <|-- Sphere : implements
Hittable <|-- HittableList : implements

class HitRecord << struct >> {
    + point: Point3
    + normal: Vec3
    + material: Rc<dyn Material>
    + t: f64
    + is_front_face: bool
    + new() -> Self
    + set_face_normal(&mut self, ray: Ray, outward_normal: Vec3)
}

HitRecord --> Point3
HitRecord --> Vec3
HitRecord --> Material
HitRecord --> Ray

@enduml
